{"version":3,"sources":["reducers/root/index.js","reducers/categories/index.js","reducers/pros/index.js","actions/categories/index.js","actions/pros/index.js","components/CategorySelector.js","components/PostalCodeInput.js","components/ProsFilter.js","components/ProsTable.js","components/Paginator.js","App.js","serviceWorker.js","index.js","store.js"],"names":["combineReducers","service_roles","state","arguments","length","undefined","action","type","Object","objectSpread","categories","payload","error","list_of_pros","pros","totalProsCount","response","fetchCategoriesInProgress","fetchCategoriesSuccess","fetchCategoriesFailure","err","fetchProsInProgress","fetchProsSuccess","fetchProsFailure","prosCountTotal","CategorySelector","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onCategorySelectionChange","e","preventDefault","selectedCategory","find","target","options","text","value","setState","categoryName","onUpdateCategory","renderOption","option","index","react_default","a","createElement","key","hidden","id","name","map","onChange","Component","PostalCodeInput","onPostalCodeUpdate","onUpdatePostCode","ProsFilter","onClick","_this$state","category","postcode","fetchPros","className","components_CategorySelector","components_PostalCodeInput","COLUMN_TYPES","ProsTable","getStarRating","rating","filledStars","times","n","blankStars","concat","renderTableHeaders","renderPros","listOfPros","pro","main_address","review_rating","starRating","getPageCountForTwentyProsPerPage","Math","ceil","toNumber","Paginator","generatePaginationLinks","_this$props","onFetchPros","categoryId","numOfPages","page","_this$props2","indexOflastPage","App","bind","assertThisInitialized","fetchCategories","categoryVal","offset","components_ProsFilter","components_ProsTable","isEmpty","components_Paginator","connect","dispatch","fetch","method","then","json","catch","requiredBodyAttrForRequest","category_id","location","toLower","bodyOfProsRequest","headers","Content-Type","x-pagination-offset","toString","x-pagination-limit","body","JSON","stringify","get","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","es","store","createStore","rootReducer","compose","applyMiddleware","thunk","logger","src_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d05262b6.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport categories from '../categories';\nimport pros from '../pros';\n\nexport default combineReducers({\n  service_roles: categories,\n  list_of_pros: pros,\n});\n","export default (state = {}, action) => {\n  switch (action.type) {\n    case 'FETCH_CATEGORIES_SUCCESS':\n      return {\n        ...state,\n        categories: action.payload,\n      }\n    case 'FETCH_CATEGORIES_FAILURE':\n      return {\n        ...state,\n        error: action.payload,\n      }\n    default:\n      return state;\n  }\n}\n","export default (state = {}, action) => {\n  switch (action.type) {\n    case 'FETCH_PROS_IN_PROGRESS':\n      return {\n        ...state,\n        pros: action.payload,\n      }\n    case 'FETCH_PROS_TOTAL_COUNT_SUCCESS':\n      return {\n        ...state,\n        totalProsCount: action.payload,\n      }\n    case 'FETCH_PROS_SUCCESS':\n      return {\n        ...state,\n        pros: action.payload.response.pros,\n      }\n    case 'FETCH_PROS_FAILURE':\n      return {\n        ...state,\n        error: action.payload,\n      }\n    default:\n      return state;\n  }\n}","export const fetchCategories = () => {\n  return dispatch => {\n    const fetchCategories = 'https://d1i9eedhsgvpdh.cloudfront.net/production-plentific-static/api-cache/find-a-pro/api/v1/categories/all.json';\n    const bodyOfCategoriesRequest = {\n      method: \"GET\",\n    }\n\n    dispatch(fetchCategoriesInProgress());\n    fetch(fetchCategories, bodyOfCategoriesRequest)\n      .then(response => response.json())\n      .then(categories => dispatch(fetchCategoriesSuccess(categories)))\n      .catch(err => dispatch(fetchCategoriesFailure(err)));\n  }\n}\n\nconst fetchCategoriesInProgress = () => ({\n  type: 'FETCH_CATEGORIES_IN_PROGRESS',\n});\n\nconst fetchCategoriesSuccess = categories => ({\n  type: 'FETCH_CATEGORIES_SUCCESS',\n  payload: categories,\n});\n\nconst fetchCategoriesFailure = err => ({\n  type: 'FETCH_CATEGORIES_FAILURE',\n  payload: err,\n});\n","import { toLower, toNumber, toString } from 'lodash';\n\nexport const fetchPros = (categoryId, postcode, offset) => {\n  return dispatch => {\n    const fetchProsEndpoint = 'https://demo.plentific.com/find-a-pro/api/v2/public/pro/search-pros/';\n    const requiredBodyAttrForRequest = {\n      category_id: toNumber(categoryId),\n      location: toLower(postcode),\n    };\n    const bodyOfProsRequest = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-pagination-offset': toString(offset),\n        'x-pagination-limit': '20',\n      },\n      body: JSON.stringify(requiredBodyAttrForRequest), // body data type must match \"Content-Type\" header\n    };\n\n    dispatch(fetchProsInProgress());\n    fetch(fetchProsEndpoint, bodyOfProsRequest)\n      .then(response => {\n        dispatch(prosCountTotal(response.headers.get('x-pagination-count')));\n        return response.json();\n      })\n      .then(pros => dispatch(fetchProsSuccess(pros)))\n      .catch(err => dispatch(fetchProsFailure(err)));\n  }\n}\n\nconst fetchProsInProgress = () => ({\n  type: 'FETCH_PROS_IN_PROGRESS',\n  payload: [],\n});\n\nconst fetchProsSuccess = pros => ({\n  type: 'FETCH_PROS_SUCCESS',\n  payload: pros,\n});\n\nconst fetchProsFailure = err => ({\n  type: 'FETCH_PROS_FAILURE',\n  payload: err,\n});\n\nconst prosCountTotal = totalProsCount => ({\n  type: 'FETCH_PROS_TOTAL_COUNT_SUCCESS',\n  payload: totalProsCount,\n});\n","import React, { Component } from 'react';\nimport { find } from 'lodash';\n\nclass CategorySelector extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      categoryName: 'Select a category',\n      value: '',\n    };\n  }\n\n  onCategorySelectionChange = e => {\n    e.preventDefault();\n    const selectedCategory = find(e.target.options, 'selected');\n    const { text, value } = selectedCategory;\n\n    this.setState({\n      categoryName: text,\n      value,\n    });\n    this.props.onUpdateCategory(text, value);\n  }\n\n  renderOption = (option, index) => {\n    if (index === 0) {\n    return <option key={index} value={this.state.value}>{this.state.categoryName}</option>;\n    }\n    if (!option.hidden) {\n      return <option key={index} value={option.id}>{option.name}</option>;\n    }\n  };\n\n  render() {\n    const options = this.props.categories.map(this.renderOption);\n\n    return (\n      <label>\n      Category:\n        <select onChange={this.onCategorySelectionChange} value={this.state.value}>\n            { options }\n        </select>\n      </label>\n    );\n  }\n}\n\nexport default CategorySelector;\n","import React, { Component } from 'react';\n\nclass PostalCodeInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: '',\n    };\n  }\n\n  onPostalCodeUpdate = (e) => {\n    e.preventDefault();\n    const { value } = e.target;\n\n    this.setState({ value });\n    this.props.onUpdatePostCode(value);\n  }\n\n  render() {\n    return (\n      <label>\n      Postcode:\n        <input value={this.state.value} onChange={this.onPostalCodeUpdate}/>\n      </label>\n    );\n  }\n}\n\nexport default PostalCodeInput;\n","import React, { Component } from 'react';\nimport CategorySelector from './CategorySelector';\nimport PostalCodeInput from './PostalCodeInput'\n\nclass ProsFilter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      category: {\n        name: '',\n        value: '',\n      },\n      postcode: '',\n    };\n  }\n\n  onClick = () => {\n    const {\n      category,\n      postcode,\n    } = this.state;\n\n    this.props.fetchPros(category.value, postcode, 0);\n  }\n\n  onUpdateCategory = (name, value) => {\n    this.setState({\n      category: {\n        name,\n        value,\n      },\n    });\n  }\n\n  onUpdatePostCode = postcode => {\n    this.setState({ postcode });\n  }\n\n  render() {\n    return (\n      <div className=\"pros-filter\">\n        <CategorySelector\n          categories={this.props.categories}\n          onUpdateCategory={this.onUpdateCategory}\n        />\n        <PostalCodeInput onUpdatePostCode={this.onUpdatePostCode} />\n        <button onClick={this.onClick}>Submit</button>\n      </div>\n    );\n  }\n}\n\nexport default ProsFilter;\n","import React, { Component } from 'react';\nimport { times } from 'lodash';\n\nconst COLUMN_TYPES = ['Id', 'Name', 'Postcode', 'Review Rating'];\n\nclass ProsTable extends Component {\n  getStarRating = rating => {\n    const filledStars = times(rating, (n) => <section className=\"star-rating black-star\" key={rating + n}>&#9733;</section>);\n    const blankStars = times(5 - rating, (n) => <section className=\"star-rating\" key={5 - rating + n}>&#9734;</section>);\n    const starMap = filledStars.concat(blankStars);\n\n    return starMap; \n  }\n\n  renderTableHeaders = () => COLUMN_TYPES.map((type, index) => <td className=\"table-header\" key={index}>{type}</td>);\n\n  renderPros = () =>\n    this.props.listOfPros.map((pro, index) => {\n      const {\n        id,\n        name,\n        main_address,\n        review_rating,\n      } = pro;\n      const starRating = this.getStarRating(review_rating);\n\n      return (\n        <tr\n          className={!(index % 2) ? 'pro-tr-grey' : undefined}\n          key={index + 1}\n        >\n            <td className=\"pro-td\" key={`${index + 2}`}>{id}</td>\n            <td className=\"pro-td\" key={`${index + 3}`}>{name}</td>\n            <td className=\"pro-td\" key={`${index + 4}`}>{main_address.postcode}</td>\n            <td className=\"pro-td\" key={`${index + 5}`}>{starRating}</td>\n        </tr>\n      );\n    }\n  );\n\n  render() {\n    return (\n      <table>\n        <tbody>\n            <tr>\n                { this.renderTableHeaders() }\n            </tr>\n            { this.renderPros() }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default ProsTable;\n","import React, { Component } from 'react';\nimport { toNumber, times } from 'lodash';\n\nconst getPageCountForTwentyProsPerPage = totalProsCount => Math.ceil(toNumber(totalProsCount) / 20);\n\nclass Paginator extends Component {\n  generatePaginationLinks = () => {\n    const {\n    onFetchPros,\n    categoryId,\n    postcode,\n    totalProsCount,\n    } = this.props;\n    const numOfPages = getPageCountForTwentyProsPerPage(totalProsCount);\n\n    return times(numOfPages, (page) => {\n      return (<button key={page} onClick={() => onFetchPros(categoryId, postcode, page)}>{page + 1}</button>);\n    });\n  };\n\n  render() {\n    const {\n    onFetchPros,\n    categoryId,\n    postcode,\n    totalProsCount,\n    } = this.props;\n    const numOfPages = getPageCountForTwentyProsPerPage(totalProsCount);\n    const indexOflastPage = numOfPages < 20 ? 0 : numOfPages;\n\n    return (\n      <div className=\"pagination\">\n        <button onClick={() => onFetchPros(categoryId, postcode, 0)}>&#171;</button>\n        { this.generatePaginationLinks() }\n        <button onClick={() => onFetchPros(categoryId, postcode, indexOflastPage)}>&#187;</button>\n      </div>\n    );\n  }\n}\n\nexport default Paginator;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { isEmpty } from 'lodash';\nimport { fetchCategories } from './actions/categories';\nimport { fetchPros } from './actions/pros';\n\nimport ProsFilter from './components/ProsFilter';\nimport ProsTable from './components/ProsTable'\nimport Paginator from './components/Paginator'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      category: {\n        value: '',\n      },\n      postcode: '',\n    };\n    this.onFetchPros = this.onFetchPros.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchCategories();\n  }\n\n  async onFetchPros(categoryVal, postcode, offset) {\n    const {\n      fetchPros,\n      listOfPros,\n    } = this.props;\n\n    await fetchPros(categoryVal, postcode, offset);\n    this.setState({\n      category: {\n        value: categoryVal,\n      },\n      postcode,\n      listOfPros: listOfPros,\n    });\n  }\n\n  render() {\n    const {\n      list_of_pros,\n      service_roles,\n    } = this.props;\n    const {\n      category,\n      postcode,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header>\n          <p>Your site</p>\n        </header>\n        <hr/>\n        { service_roles.categories &&\n          <ProsFilter\n            categories={service_roles.categories}\n            fetchPros={this.onFetchPros}\n          />\n        }\n        <hr/>\n        { list_of_pros.pros &&\n          <ProsTable\n            listOfPros={!isEmpty(list_of_pros.pros) ? list_of_pros.pros : []}\n          />\n        }\n        { list_of_pros.totalProsCount &&\n          <Paginator\n            onFetchPros={this.onFetchPros}\n            categoryId={category.value}\n            postcode={postcode}\n            totalProsCount={list_of_pros.totalProsCount}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  ...state,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCategories: () => dispatch(fetchCategories()),\n  fetchPros: (categoryName, postcode, offset) => dispatch(fetchPros(categoryName, postcode, offset))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nserviceWorker.register();\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/root';\n\nexport default function configureStore() {\n  return createStore(\n      rootReducer,\n      compose(\n      applyMiddleware(thunk),\n      applyMiddleware(logger),\n    ),\n  );\n}\n"],"sourceRoot":""}