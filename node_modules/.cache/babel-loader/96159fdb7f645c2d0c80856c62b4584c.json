{"ast":null,"code":"import { toLower, toNumber, toString } from 'lodash';\nexport var fetchPros = function fetchPros(categoryId, postcode, offset) {\n  return function (dispatch) {\n    var fetchProsEndpoint = 'https://demo.plentific.com/find-a-pro/api/v2/public/pro/search-pros/';\n    var requiredBodyAttrForRequest = {\n      category_id: toNumber(categoryId),\n      location: toLower(postcode)\n    };\n    var bodyOfProsRequest = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-pagination-offset': toString(offset),\n        'x-pagination-limit': '20'\n      },\n      body: JSON.stringify(requiredBodyAttrForRequest) // body data type must match \"Content-Type\" header\n\n    };\n    dispatch(fetchProsInProgress());\n    fetch(fetchProsEndpoint, bodyOfProsRequest).then(function (response) {\n      dispatch(prosCountTotal(response.headers.get('x-pagination-count')));\n      return response.json();\n    }).then(function (pros) {\n      return dispatch(fetchProsSuccess(pros));\n    }).catch(function (err) {\n      return dispatch(fetchProsFailure(err));\n    });\n  };\n};\n\nvar fetchProsInProgress = function fetchProsInProgress() {\n  return {\n    type: 'FETCH_PROS_IN_PROGRESS',\n    payload: []\n  };\n};\n\nvar fetchProsSuccess = function fetchProsSuccess(pros) {\n  return {\n    type: 'FETCH_PROS_SUCCESS',\n    payload: pros\n  };\n};\n\nvar fetchProsFailure = function fetchProsFailure(err) {\n  return {\n    type: 'FETCH_PROS_FAILURE',\n    payload: err\n  };\n};\n\nvar prosCountTotal = function prosCountTotal(totalProsCount) {\n  return {\n    type: 'FETCH_PROS_TOTAL_COUNT_SUCCESS',\n    payload: totalProsCount\n  };\n};","map":{"version":3,"sources":["/Users/christinejavier/Desktop/plentific-challenge/src/actions/pros/index.js"],"names":["toLower","toNumber","toString","fetchPros","categoryId","postcode","offset","dispatch","fetchProsEndpoint","requiredBodyAttrForRequest","category_id","location","bodyOfProsRequest","method","headers","body","JSON","stringify","fetchProsInProgress","fetch","then","response","prosCountTotal","get","json","pros","fetchProsSuccess","catch","err","fetchProsFailure","type","payload","totalProsCount"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,EAA4BC,QAA5B,QAA4C,QAA5C;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,UAAD,EAAaC,QAAb,EAAuBC,MAAvB,EAAkC;AACzD,SAAO,UAAAC,QAAQ,EAAI;AACjB,QAAMC,iBAAiB,GAAG,sEAA1B;AACA,QAAMC,0BAA0B,GAAG;AACjCC,MAAAA,WAAW,EAAET,QAAQ,CAACG,UAAD,CADY;AAEjCO,MAAAA,QAAQ,EAAEX,OAAO,CAACK,QAAD;AAFgB,KAAnC;AAIA,QAAMO,iBAAiB,GAAG;AACxBC,MAAAA,MAAM,EAAE,MADgB;AAExBC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,+BAAuBZ,QAAQ,CAACI,MAAD,CAFxB;AAGP,8BAAsB;AAHf,OAFe;AAOxBS,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,0BAAf,CAPkB,CAO0B;;AAP1B,KAA1B;AAUAF,IAAAA,QAAQ,CAACW,mBAAmB,EAApB,CAAR;AACAC,IAAAA,KAAK,CAACX,iBAAD,EAAoBI,iBAApB,CAAL,CACGQ,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChBd,MAAAA,QAAQ,CAACe,cAAc,CAACD,QAAQ,CAACP,OAAT,CAAiBS,GAAjB,CAAqB,oBAArB,CAAD,CAAf,CAAR;AACA,aAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,KAJH,EAKGJ,IALH,CAKQ,UAAAK,IAAI;AAAA,aAAIlB,QAAQ,CAACmB,gBAAgB,CAACD,IAAD,CAAjB,CAAZ;AAAA,KALZ,EAMGE,KANH,CAMS,UAAAC,GAAG;AAAA,aAAIrB,QAAQ,CAACsB,gBAAgB,CAACD,GAAD,CAAjB,CAAZ;AAAA,KANZ;AAOD,GAxBD;AAyBD,CA1BM;;AA4BP,IAAMV,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,SAAO;AACjCY,IAAAA,IAAI,EAAE,wBAD2B;AAEjCC,IAAAA,OAAO,EAAE;AAFwB,GAAP;AAAA,CAA5B;;AAKA,IAAML,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAD,IAAI;AAAA,SAAK;AAChCK,IAAAA,IAAI,EAAE,oBAD0B;AAEhCC,IAAAA,OAAO,EAAEN;AAFuB,GAAL;AAAA,CAA7B;;AAKA,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAD,GAAG;AAAA,SAAK;AAC/BE,IAAAA,IAAI,EAAE,oBADyB;AAE/BC,IAAAA,OAAO,EAAEH;AAFsB,GAAL;AAAA,CAA5B;;AAKA,IAAMN,cAAc,GAAG,SAAjBA,cAAiB,CAAAU,cAAc;AAAA,SAAK;AACxCF,IAAAA,IAAI,EAAE,gCADkC;AAExCC,IAAAA,OAAO,EAAEC;AAF+B,GAAL;AAAA,CAArC","sourcesContent":["import { toLower, toNumber, toString } from 'lodash';\n\nexport const fetchPros = (categoryId, postcode, offset) => {\n  return dispatch => {\n    const fetchProsEndpoint = 'https://demo.plentific.com/find-a-pro/api/v2/public/pro/search-pros/';\n    const requiredBodyAttrForRequest = {\n      category_id: toNumber(categoryId),\n      location: toLower(postcode),\n    };\n    const bodyOfProsRequest = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-pagination-offset': toString(offset),\n        'x-pagination-limit': '20',\n      },\n      body: JSON.stringify(requiredBodyAttrForRequest), // body data type must match \"Content-Type\" header\n    };\n\n    dispatch(fetchProsInProgress());\n    fetch(fetchProsEndpoint, bodyOfProsRequest)\n      .then(response => {\n        dispatch(prosCountTotal(response.headers.get('x-pagination-count')));\n        return response.json();\n      })\n      .then(pros => dispatch(fetchProsSuccess(pros)))\n      .catch(err => dispatch(fetchProsFailure(err)));\n  }\n}\n\nconst fetchProsInProgress = () => ({\n  type: 'FETCH_PROS_IN_PROGRESS',\n  payload: [],\n});\n\nconst fetchProsSuccess = pros => ({\n  type: 'FETCH_PROS_SUCCESS',\n  payload: pros,\n});\n\nconst fetchProsFailure = err => ({\n  type: 'FETCH_PROS_FAILURE',\n  payload: err,\n});\n\nconst prosCountTotal = totalProsCount => ({\n  type: 'FETCH_PROS_TOTAL_COUNT_SUCCESS',\n  payload: totalProsCount,\n});\n"]},"metadata":{},"sourceType":"module"}